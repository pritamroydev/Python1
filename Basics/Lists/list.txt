1- ordered
2- mutable
3- dynamic
4- heterogenous



                                    **Lists vs Array**

Flexibility and Size:

Lists: Dynamic in size

Arrays: Typically fixed in size

-------------------------------------------

Data Type Homogeneity:

Lists: Can store elements of different data types (e.g., integers, strings, floats) within the same list.

Arrays: Generally store elements of the same data type (homogeneous). This is particularly true for arrays in languages like C, C++, or Java, and also for specialized array types in Python (like NumPy arrays).

-------------------------------------------

Performance and Memory Usage:

Lists: Due to their dynamic nature and ability to store mixed data types, lists can sometimes be less memory-efficient and slightly slower for numerical operations compared to arrays, especially large arrays of homogeneous data.

Arrays: Often more memory-efficient and can offer better performance for numerical computations, particularly when dealing with large datasets of a single data type, as seen with libraries like NumPy in Python.

-------------------------------------------

Functionality:

Lists: Offer a wide range of built-in methods for manipulation (adding, removing, searching, sorting elements).

Arrays: While providing basic indexing and access, specialized array implementations (like NumPy arrays) offer powerful mathematical and scientific computing functions.